// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ReasonReact from "reason-react/lib/es6/src/ReasonReact.js";
import * as Router$ReactTemplate from "./Router.bs.js";
import * as ReactTransitionGroup$ReactTemplate from "./ReactTransitionGroup.bs.js";

require("../../../src/App.scss");

var component = ReasonReact.reducerComponent("App");

function make(currentRoute, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              var init = self[/* state */1];
              return /* record */[
                      /* isOpen */false,
                      /* touches */init[/* touches */1],
                      /* width */init[/* width */2]
                    ];
            }),
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* isOpen */0];
              var match$1 = self[/* state */1][/* isOpen */0];
              var match$2 = self[/* state */1][/* touches */1];
              var match$3 = match$2[/* first */0];
              var tmp;
              var exit = 0;
              if (match$3 !== undefined) {
                var match$4 = match$2[/* last */1];
                if (match$4 !== undefined) {
                  var x$prime = match$4[0];
                  var x = match$3[0];
                  var match$5 = x$prime - x > 0.0;
                  tmp = {
                    transition: "none",
                    transform: "translateX(" + (Pervasives.string_of_float(match$5 ? 0.0 : x$prime - x) + "0px)")
                  };
                } else {
                  exit = 1;
                }
              } else {
                exit = 1;
              }
              if (exit === 1) {
                tmp = { };
              }
              return React.createElement("div", {
                          className: "App" + (
                            match ? " overlay" : ""
                          ),
                          onClick: (function (_event) {
                              if (self[/* state */1][/* isOpen */0]) {
                                return Curry._1(self[/* send */3], /* ToggleMenu */Block.__(0, [false]));
                              } else {
                                return 0;
                              }
                            }),
                          onTouchEnd: (function (_event) {
                              return Curry._1(self[/* send */3], /* TouchEnd */0);
                            }),
                          onTouchMove: (function ($$event) {
                              return Curry._1(self[/* send */3], /* TouchMove */Block.__(2, [$$event.changedTouches.item(0).clientX]));
                            }),
                          onTouchStart: (function ($$event) {
                              return Curry._1(self[/* send */3], /* TouchStart */Block.__(1, [$$event.changedTouches.item(0).clientX]));
                            })
                        }, React.createElement("header", undefined, React.createElement("a", {
                                  onClick: (function ($$event) {
                                      $$event.stopPropagation();
                                      return Curry._1(self[/* send */3], /* ToggleMenu */Block.__(0, [true]));
                                    })
                                }, React.createElement("img", {
                                      src: require("../../../src/img/icon/hamburger.svg")
                                    })), React.createElement("h1", undefined, currentRoute[/* title */1])), React.createElement("nav", {
                              ref: Curry._1(self[/* handle */0], (function (ref, self) {
                                      self[/* state */1][/* width */2][0] = (ref == null) ? 0.0 : ref.clientWidth;
                                      return /* () */0;
                                    })),
                              className: match$1 ? "active" : "",
                              style: tmp,
                              onClick: (function ($$event) {
                                  $$event.stopPropagation();
                                  return /* () */0;
                                })
                            }, React.createElement("header", undefined, React.createElement("a", {
                                      onClick: (function (_event) {
                                          return Curry._1(self[/* send */3], /* ToggleMenu */Block.__(0, [false]));
                                        })
                                    }, React.createElement("img", {
                                          src: require("../../../src/img/icon/arrow.svg")
                                        }), currentRoute[/* title */1])), React.createElement("label", undefined, "home"), React.createElement("ul", undefined, React.createElement("li", undefined, ReasonReact.element(undefined, undefined, Router$ReactTemplate.NavLink[/* make */1]("/", /* array */["Home"])))), React.createElement("label", undefined, "pages"), React.createElement("ul", undefined, React.createElement("li", undefined, ReasonReact.element(undefined, undefined, Router$ReactTemplate.NavLink[/* make */1]("/page1", /* array */["Page1"]))), React.createElement("li", undefined, ReasonReact.element(undefined, undefined, Router$ReactTemplate.NavLink[/* make */1]("/page2", /* array */["Page2"]))), React.createElement("li", undefined, ReasonReact.element(undefined, undefined, Router$ReactTemplate.NavLink[/* make */1]("/page3", /* array */["Page3"]))))), React.createElement("main", undefined, ReasonReact.element(undefined, undefined, ReactTransitionGroup$ReactTemplate.TransitionGroup[/* make */0](/* array */[ReasonReact.element(currentRoute[/* title */1], undefined, ReactTransitionGroup$ReactTemplate.CSSTransition[/* make */0](true, 900, "routeTransition", /* array */[currentRoute[/* component */2]]))]))));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* isOpen */false,
                      /* touches : record */[
                        /* first */undefined,
                        /* last */undefined
                      ],
                      /* width : record */[/* contents */0.0]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (state[/* isOpen */0]) {
                  var match = Belt_Option.getWithDefault(state[/* touches */1][/* first */0], /* tuple */[
                        0.0,
                        0.0
                      ]);
                  var match$1 = Belt_Option.getWithDefault(state[/* touches */1][/* last */1], /* tuple */[
                        0.0,
                        0.0
                      ]);
                  var x$prime = match$1[0];
                  var velocity = (x$prime - match[0]) / (match$1[1] - match[1]);
                  var state_000 = /* isOpen */state[/* isOpen */0];
                  var state_001 = /* touches : record */[
                    /* first */undefined,
                    /* last */undefined
                  ];
                  var state_002 = /* width */state[/* width */2];
                  var state$1 = /* record */[
                    state_000,
                    state_001,
                    state_002
                  ];
                  if (velocity < -0.3 || x$prime < state_002[0] / 2.0) {
                    return /* UpdateWithSideEffects */Block.__(2, [
                              state$1,
                              (function (self) {
                                  return Curry._1(self[/* send */3], /* ToggleMenu */Block.__(0, [false]));
                                })
                            ]);
                  } else {
                    return /* Update */Block.__(0, [state$1]);
                  }
                } else {
                  return /* NoUpdate */0;
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* isOpen */action[0],
                                  /* touches */state[/* touches */1],
                                  /* width */state[/* width */2]
                                ]]);
                  case 1 : 
                      if (state[/* isOpen */0]) {
                        return /* Update */Block.__(0, [/* record */[
                                    /* isOpen */state[/* isOpen */0],
                                    /* touches : record */[
                                      /* first *//* tuple */[
                                        action[0],
                                        performance.now()
                                      ],
                                      /* last */undefined
                                    ],
                                    /* width */state[/* width */2]
                                  ]]);
                      } else {
                        return /* NoUpdate */0;
                      }
                  case 2 : 
                      if (state[/* isOpen */0]) {
                        var init = state[/* touches */1];
                        return /* Update */Block.__(0, [/* record */[
                                    /* isOpen */state[/* isOpen */0],
                                    /* touches : record */[
                                      /* first */init[/* first */0],
                                      /* last *//* tuple */[
                                        action[0],
                                        performance.now()
                                      ]
                                    ],
                                    /* width */state[/* width */2]
                                  ]]);
                      } else {
                        return /* NoUpdate */0;
                      }
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  component ,
  make ,
  
}
/*  Not a pure module */
